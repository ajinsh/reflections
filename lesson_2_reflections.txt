What happens when you initialize a repository? Why do you need to do it?

A metadata of the repository gets created in the existing directory which contains the history of the files in the repository.Also, no commits are created and all the files in the repository are untracked.You initialize the repository to track changes to the file in the repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains only the files which needs to be commited whereas the working directory/repository contains all the files.The staging area will contain only logical change to each file in the working directory and commit them to the repository. 


How can you use the staging area to make sure you have one commit per logical change?

The staging area will be nothing but collection of files that represent a single logical change and it can be obtained by using command "git add *files"


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches can be helpful in case where instead of adding a new commit if u want to test a functionality to the main version such as using location and language semantics to the project.By using branches, you can switch back and forth between the main version and a functionality implementation that way once your main version in main branch is done ,you can merge it with the branch that contains functionality 

How do the diagrams help you visualize the branch structure?

Diagrams let you find the commits and their previous parent commits.Thus, you can traverse to any commit from the given diagram.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches results in integration of the individual changes done in each of the branches and making a single merge commit which is the head of the current branch .We represent it in the form of branches joining into one becuase the merged commit has two parent commits.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros of Auto merging:
1. Saves time by automatically merging different changes done.
2. Gives time to think on the conflicting merge.

Cons :
1. There may be some mistaked done at the time of merging it manually.