When would you want to use a remote repository rather than keeping all your work local?

A remote repository is needed if collaboration is required on the projects or if you want to share the projects with others.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Having the changes automatically pulled into local might introduce unnecessary commits without the permission into the local repository. Thus, if someone else is working on the project and pushes changes to the remote and then Git automatically updates all of the local repositories then even though I didnt have made any changes into the repository still the new commits will appear into my local repository.Also, the unnecessary commits may be a new feature update which is not yet released to the general public code version and you may want to release it only when it is tested for quality purpose. 


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork is a feature on GitHub that lets you clone other peoples repository without the need to clone it in your local repo and then use it.Clone is a feture that allows you to download repository hosted as remote on GitHub or make a copy of local repository  to to other location in ur local repo.Branch is created as a collection of new commit path if you want to make some experimental features,updates to your existing commit in the main commit path(also called as master)


What is the benefit of having a copy of the last known state of the remote stored locally?

You can access all the commits that are on the GitHub and then work offline.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

For tracking versions without using Git and GitHub,one could version each file based upon the changes(new feature,code optimization etc),and then share it with others either using mail or use DropBox in which case dropbox will automatically keep track of changes.
It would be really harder to do so since one has to manually keep track of every version and its detail,but in case of Git and GitHub,the commits and commit message help us track each change.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Changes needed to be implemented in the seperate branch rather directly in master so as not to break the master branch code or access the master branch code directly. This can happen if there is a collaboration in the project where the changes by the group members need to be first gone through before they are commited on the master branch.Benefits of changing in seperate branch is collaboration is done in a proper way.Directly changing the master branch is beneficial if there is no group co-ordination required i.e if a single person is working on the same.  